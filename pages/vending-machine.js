import Head from 'next/head'
import {useState, useEffect} from 'react'
import Web3 from 'web3'
import vendingMachineContract from '../blockchain/vending'
import 'bulma/css/bulma.css';
import styles from '../styles/VendingMachine.module.css'

const VendingMachine = () => {
    
    const [error, setError] = useState('')
    const [successMsg, setSuccessMsg] = useState('')
    const [inventory, setInventory] = useState('')
    const [donutCount, setDonutCount] = useState('')
    const [buyCount, setBuyCount] = useState()
    const [web3,setWeb3] = useState(null)
    const [address,setAddress] = useState(null)
    const [vmContract,setVmContract] = useState(null)
    
    
    useEffect(() =>{
        setSuccessMsg(`${buyCount} donuts pruchased`)
       if(vmContract) getInventoryHandler()
       if (vmContract && address)  getDonutCountHandler()
    }, [vmContract, address])

    const getInventoryHandler = async() => {
        const inventory = await vmContract.methods.getVendingMachineBalance().call()
        setInventory(inventory)
    }
    
    const buyDonutHandler = async() => {
       try {
        await vmContract.methods.purchase(buyCount).send({
        from: address,
        value: web3.utils.toWei('2', 'ether') * buyCount
        
        })
    } catch (err) {
            setError(err.message)
    }
   }

    const updateDonutQuantity = e => {
       setBuyCount(e.target.value)
    }

    const connectWalletHandler = async () => {
        //Check if wallet is available
        if (typeof window !== "undefined" && typeof window.ethereum !== "undefined") {
            try{
                //request wallet connection
                await window.ethereum.request({method: "eth_requestAccounts"})

                //set web3 instance
                web3 = new Web3(window.ethereum)
                setWeb3(web3)

                //get list of accounts
                const accounts = await web3.eth.getAccounts()
                setAddress(accounts[0])

                //create local contract copy
                const vm = vendingMachineContract(web3)
                setVmContract(vm)

            }  catch(err) {
                setError(err.message)
            }
          

        } else {
            // meta mask not installed
            console.log("Please install Metamask")
        }
    }

    const getDonutCountHandler = async () => {
        const count = await vmContract.methods.donutBalances(address).call()
        setDonutCount(count)
    }


    return(
    <div className={styles.main}>
        <Head>
        <title>VendingMachine App</title>
        <meta name="description" content="Generated by create next app" />
        
      </Head>
            <nav className="navbar mt-4 mb-4">
                <div className="container">
                    <div className="navbar-brand">
                        <h1>Vending Machine</h1>
                    </div>
                    <div className="navbar-end">
                        <button onClick={connectWalletHandler} className="button is-primary">Connect Wallet</button>
                    </div>
                </div>
            </nav>
            <section>
                <div className="container">
                    <h2>Vending Machine inventory: {inventory}</h2>
                </div>
            </section>
            <section>
                <div className="container">
                    <h2>My donuts: {donutCount}</h2>
                </div>
            </section>
            <section className="mt-5 ">
                <div className="container">
                    <div className="field">
                        <label className="label">Buy Donuts</label>
                        <div className="control">
                            <input onChange={updateDonutQuantity} className="input" placeholder="Enter amount..."></input>
                        </div>
                        <button 
                        onClick={buyDonutHandler} 
                        className="button is-primary mt-2">
                        Buy Now
                        </button>
                    </div>
                </div>
            </section>
            <section>
                <div className="container has-text-danger">
                    <p>{error}</p>
                </div>
            </section>
            <section>
                <div className="container has-text-success">
                    <p>{successMsg}</p>
                </div>
            </section>

            </div>
     );
}

export default VendingMachine;